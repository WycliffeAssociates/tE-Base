# upstream web {  
#   ip_hash;
#   server web:8000;
# }

# # portal
# server {  

#   location /static/ {    
#         autoindex on;    
#         alias /static/; 
#   }

#   location / {
#         proxy_pass http://web/;
#     }
#   listen 8000;
#   server_name localhost;
# }


# Configuration containing list of application servers
upstream app_servers {

	server web:8000 fail_timeout=0;
	#server unix:/tmp/gunicorn.sock fail_timeout=0;
	# ..
	# .

}

# Configuration for Nginx
server {

	# Running port
	listen 443 ssl http2;
	listen 80;
	listen 8001;

	include snippets/self-signed.conf;
	include snippets/ssl-params.conf;

	client_max_body_size 4G;
	large_client_header_buffers 4 16k;

	server_name localhost;

	keepalive_timeout 5;

	root /var/www/html/tE-backend/tRecorderApi/;

	location / {
		# checks for static file, if not found proxy to app
		try_files $uri @proxy_to_app;
	}
	
	location ~* \.(py|jar) { 
                deny all; 
        }
	
        location ~* \.(wav|mp3|zip|tr)$ {
                add_header Access-Control-Allow-Origin *;
                #deny all;
        }

	location @proxy_to_app {
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		# enable this if and only if you use HTTPS
		# proxy_set_header X-Forwarded-Proto https;
		proxy_set_header Host $http_host;
		# we don't want nginx trying to do something clever with
		# redirects, we set the Host: header above already.
		proxy_redirect off;
		proxy_pass http://app_servers;
	}

	# error_page 500 502 503 504 /500.html;
	# location = /500.html {
	# 	root /var/www/html/te.loc/tRecorderApi/static/;
	# }
}
